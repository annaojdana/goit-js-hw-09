{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA2CA,SAASC,EAAcC,EAAUC,GACTC,KAAKC,SAAW,GAGpCC,EAAAP,GAASQ,OAAOC,QAAS,uBAAuCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,OAGtEG,EAAAP,GAASQ,OAAOG,QAAS,sBAAoCD,OAAfP,EAAS,QAAYO,OAANN,EAAM,OAhD1DQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBACN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYf,EAAKa,EAALb,MAAOgB,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAEvBC,EAAaC,OAAOnB,EAAMoB,OAC9B,GAAIpB,EAAMoB,OAAS,GAAKJ,EAAKI,OAAS,GAAKH,EAAOG,MAAQ,EAAG,CAC3DC,WAAWvB,EAAc,EAAGoB,GAAYA,GACxC,IAAK,IAAII,EAAI,EAAGA,GAAKL,EAAOG,MAAOE,IACjCJ,GAAcC,OAAOH,EAAKI,OAC1BC,WAAWvB,EAAcwB,EAAGJ,GAAaA,QAI3Cf,EAAAP,GAASQ,OAAOG,QAAS,8BAqB3BI,EAAMG,cAAcS","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n  let delayTotal = Number(delay.value);\n  if (delay.value >= 0 && step.value >= 0 && amount.value > 0) {\n    setTimeout(createPromise(1, delayTotal),delayTotal);\n    for (let i = 2; i <= amount.value; i++) {\n      delayTotal += Number(step.value);\n      setTimeout(createPromise(i, delayTotal), delayTotal);\n  }\n  }\n  else {\n    Notiflix.Notify.failure(`❌ select values ​​above 0 `);\n  }\n\n\n//   createPromise(1, delay)\n//    .then(({ position, delay }) => {\n//    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// for (let i = 0; i < amount.value; i++) {\n//   createPromise(i, delay.value)\n//   .then(({ position, delay }) => {\n//    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n\n  event.currentTarget.reset();\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    // Reject\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","$parcel$interopDefault","Notify","success","concat","failure","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","delayTotal","Number","value","setTimeout","i","reset"],"version":3,"file":"03-promises.412bc537.js.map"}