{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAyCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,UAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAACH,SAAAA,EAASC,MAAAA,IAGlBG,EAAO,CAACJ,SAAAA,EAASC,MAAAA,MAElBA,MAjDMO,SAASC,cAAc,SAG/BC,iBAAiB,UAGtB,SAAsBC,GACpBA,EAAMC,iBAEN,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALZ,MAAOgB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGvBC,EAAUC,OAAOJ,EAAMK,OACrBC,EAASF,OAAOH,EAAKI,OACrBE,EAAWH,OAAOF,EAAOG,OAE/B,GAAIF,GAAW,GAAKG,GAAU,GAAKC,EAAW,EAE5C,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAUC,IAE7BzB,EAAcyB,EAAGL,GAChBM,MAAK,SAAAC,OAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjB0B,EAAA9B,GAAS+B,OAAOC,QAAS,uBAAuCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,UAEvE8B,OAAM,SAAAL,OAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClB0B,EAAA9B,GAAS+B,OAAOI,QAAS,sBAAsCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,UAEvEkB,GAAWC,OAAOH,EAAKI,YAGzBM,EAAA9B,GAAS+B,OAAOI,QAAS,8BAG3BrB,EAAMG,cAAcmB","sources":["src/js/03-promises.js"],"sourcesContent":["// Notiflix library\nimport Notiflix from 'notiflix';\n\n// QuerySelectors\nconst form = document.querySelector(\".form\");\n\n// Listening for the submit\nform.addEventListener(\"submit\", handleSubmit);\n\n// Funcions\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n\n  let delayMs = Number(delay.value);\n  const stepMs = Number(step.value);\n  const amountNr = Number(amount.value);\n\n  if (delayMs >= 0 && stepMs >= 0 && amountNr > 0) {\n\n    for (let i = 1; i <= amountNr; i++) {\n\n      createPromise(i, delayMs)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n      delayMs += Number(step.value);\n    }\n  } else {\n    Notiflix.Notify.failure(`❌ select values ​​above 0 `);\n  };\n\n  event.currentTarget.reset();\n};\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) =>\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({position,delay});\n      } else {\n        // Reject\n        reject({position,delay});\n      }\n    }, delay))\n};\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayMs","Number","value","stepMs","amountNr","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.1a915968.js.map"}